pipeline {
    
    agent any
   tools { 
        maven 'Maven_3.5.0' 
        jdk 'Java_8' 
    }
    stages {
        stage ('Checkout') {
            steps {
              git url: 'http://git.xavient.com/DevOps/spring-jsp-boot.git', branch: 'master', credentialsId: 'b68e002c-9c4b-472a-b114-a862bb3d6db0'
            }
        }
        
        stage ('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                ''' 
            }
        }
        
        stage ('Build') {
            steps {
                sh 'mvn -Dmaven.test.failure.ignore=true install' 
            }
        }
        
        stage('SonarQube analysis') { 
            steps {
            script{
             def scannerHome = tool 'Sonar_3.0.3'
             withSonarQubeEnv('Sonar') {
                  sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.3.0.603:sonar ' +
                  '-Dsonar.projectKey=java-sonar-runner-simple ' +
                  '-Dsonar.language=java ' +
                  '-Dsonar.sources=src ' +
                  '-Dsonar.projectName=spring-jsp-boot1 ' +
                  '-Dsonar.sourceEncoding=UTF-8 '
                  
             }
            }
            }  
        }
        
        stage('Deploy to Artifactory configuration') {
            steps {
               script{
                def server = Artifactory.server 'Artifactory'
                def uploadSpec = """{
                  "files": [
                         {
                    "pattern": "/var/jenkins_home/workspace/spring-mvc/target/spring-jsp-boot-0.1.1.war",
                    "target": "spring_boot_1",
                    "props": "p1=v1;p2=v2"
                         },
                         {
                    "pattern": "/var/jenkins_home/workspace/spring-mvc/target/spring-jsp-boot-0.1.1.war",
                    "target": "spring_boot_1"
                         }
                           ]
                            }"""

                // Upload to Artifactory.
                def buildInfo1 = server.upload spec: uploadSpec
              // Publish the build to Artifactory
               server.publishBuildInfo buildInfo1
              }
            }
        }
    }
}






